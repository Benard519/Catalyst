---
export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  ogImage?: string;
}

const { title, description = "Catalyst Digital Marketing - We Don't Just Market, We Drive Growth", keywords = "digital marketing, SEO, PPC, social media marketing, web development", ogImage = "/og-image.jpg" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:type" content="website" />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
    
    <!-- Schema.org structured data -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "Catalyst Digital Marketing",
      "url": "https://catalystdigitalmarketing.com",
      "logo": "https://catalystdigitalmarketing.com/logo.png",
      "description": "Full-service digital marketing agency specializing in SEO, PPC, social media, and web development.",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "Eldoret",
        "addressRegion": "Rift Valley",
        "postalCode": "30100",
        "addressCountry": "KE"
      },
      "contactPoint": {
        "@type": "ContactPoint",
        "telephone": "+254-111-816-896",
        "contactType": "customer service"
      }
    }
    </script>
  </head>
  <body class="font-sans antialiased">
    <slot />
    
    <!-- Cookie Notice -->
    <div id="cookie-notice" class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 z-50 transform translate-y-full transition-transform duration-300">
      <div class="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between">
        <p class="text-sm mb-4 sm:mb-0">
          We use cookies to enhance your experience. By continuing to visit this site you agree to our use of cookies.
        </p>
        <div class="flex space-x-4">
          <button id="accept-cookies" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded text-sm font-medium transition-colors">
            Accept
          </button>
          <button id="decline-cookies" class="border border-gray-600 hover:border-gray-500 px-4 py-2 rounded text-sm font-medium transition-colors">
            Decline
          </button>
        </div>
      </div>
    </div>

    <script>
      // Cookie notice functionality
      const cookieNotice = document.getElementById('cookie-notice');
      const acceptBtn = document.getElementById('accept-cookies');
      const declineBtn = document.getElementById('decline-cookies');

      // Show cookie notice if not already accepted
      if (!localStorage.getItem('cookiesAccepted')) {
        setTimeout(() => {
          cookieNotice.classList.remove('translate-y-full');
        }, 1000);
      }

      acceptBtn?.addEventListener('click', () => {
        localStorage.setItem('cookiesAccepted', 'true');
        cookieNotice.classList.add('translate-y-full');
      });

      declineBtn?.addEventListener('click', () => {
        localStorage.setItem('cookiesAccepted', 'false');
        cookieNotice.classList.add('translate-y-full');
      });

      // Smooth scrolling for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });

      // Intersection Observer for animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-slide-up');
          }
        });
      }, observerOptions);

      // Observe elements with animation classes
      document.querySelectorAll('.animate-on-scroll').forEach(el => {
        observer.observe(el);
      });
    </script>
  </body>
</html>